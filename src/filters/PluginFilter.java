package filters;

import java.io.File;
import java.io.FilenameFilter;

/**
 * Class to test whether a file is a plugin.
 * 
 * @author Dimitri - Marion 
 * 
 */
public class PluginFilter implements FilenameFilter {

	private Class<?> classPlugin;

	@Override
	public boolean accept(File dir, String name) {
		return isDotClass(name) && createClassPlugin(name)
				&& implementsPlugin() && hasGoodPackage() && hasGoodConstructor();
	}

	/**
	 * Tests wether the file has the good extent (.class).
	 * 
	 * @param name
	 *            the name of the file
	 * @return true if the fil end with .class, false otherwise
	 */
	protected boolean isDotClass(String name) {
		return name.endsWith(".class");
	}

	/**
	 * Tests wether the file corresponds to a class.
	 * 
	 * @param name
	 *            the name of the file
	 * @return true if the class is create, false otherwise
	 */
	protected boolean createClassPlugin(String name) {
		String nameNoExtent = name.substring(0, name.lastIndexOf(".class"));

		try {
			classPlugin = Class.forName("plugins." + nameNoExtent);
		} catch (ClassNotFoundException e) {
			return false;
		}
		return true;

	}

	/**
	 * Tests wether the class generated by the file implements the good
	 * interface (plugin.Plugin).
	 * 
	 * @return true if the file implements the interface, false otherwise
	 */
	protected boolean implementsPlugin() {
		Class<?>[] tabInterfaces = classPlugin.getInterfaces();

		for (Class<?> element : tabInterfaces) {
			if (element.getName().equals("plugin.Plugin")) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Tests wether the file is from the package plugins.
	 * 
	 * @return true if it's the good package, false otherwise
	 */
	protected boolean hasGoodPackage() {
		if (!classPlugin.getPackage().getName().equals("plugins"))
			return false;
		return true;
	}

	/**
	 * Tests wether the generated class file has a constructor with no
	 * arguments.
	 * 
	 * @return true if the constructor has no argument, false otherwise.
	 */
	protected boolean hasGoodConstructor() {
		try {
			classPlugin.getConstructor(new Class[0]);
		} catch (NoSuchMethodException e) {
			return false;
		}

		return true;
	}
	
}
